import argparse
import requests
from environs import Env
import telegram
from telegram import ParseMode
from telegram.ext import Updater, CommandHandler


env = Env()
env.read_env()
DVMN_TOKEN = env.str("AUTH_TOKEN", None)
TG_BOT_TOKEN = env.str("TG_BOT_TOKEN", None)
TG_CHAT_ID = env.int("TG_CHAT_ID", None)


def start_long_polling(token, timestamp, timeout=100):
    url = "https://dvmn.org/api/long_polling/"
    response = requests.get(
        url,
        headers={"Authorization": token},
        params={"timestamp": timestamp},
        timeout=timeout,
    )
    response.raise_for_status()
    return response.json()


def make_bot_messages(raw_results):
    messages = []
    for raw_result in raw_results:
        title = raw_result.get("lesson_title")
        is_negative = raw_result.get("is_negative")
        lesson_url = raw_result.get("lesson_url")
        if not all([title, is_negative, lesson_url]):
            raise ValueError("Изменилась форма ответа API")

        lesson_status = "<b>вернулась с проверки</b>" if is_negative else "<b>принята</b>"
        message = f'Работа\n<i>"{title}"</i>\n{lesson_status}\n<a href="{lesson_url}">Cсылка</a>'
        messages.append(message)
    return messages


def start(update, context):
    user = update.message.from_user
    update.message.reply_text(
        f"Добро пожаловать, {user.first_name}!\nБот запущен!"
    )


def main():
    parser = argparse.ArgumentParser(description='Ввод учетных данных')
    parser.add_argument(
        '-d', '--dvmn', help='Токен API Devman', default=DVMN_TOKEN)
    parser.add_argument(
        '-b', '--bot', help='Токен Telegram-бота', default=TG_BOT_TOKEN)
    parser.add_argument(
        '-c', '--chatid', help='ID Telegram-чата, куда будут отправлены сообщения', default=TG_CHAT_ID)

    args = parser.parse_args()
    
    dvmn_token = args.dvmn
    bot_token = args.bot
    chat_id = args.chatid

    if not all([dvmn_token, bot_token, chat_id]):
        raise ValueError("Отсутствуют учетные данные")

    bot = telegram.Bot(token=bot_token)
    updater = Updater(bot=bot, use_context=True)
    updater.dispatcher.add_handler(CommandHandler("start", start))
    updater.start_polling()
    timestamp = None
    
    while True:
        try:
            response = start_long_polling(dvmn_token, timestamp)
            status = response.get("status")
            if status == "timeout":
                timestamp = response.get("timestamp_to_request")
            if status == "found":
                raw_results = response.get("new_attempts")
                messages = make_bot_messages(raw_results)
                for message in messages:
                    bot.send_message(chat_id=chat_id,
                                     text=message, parse_mode=ParseMode.HTML)
        except requests.exceptions.ReadTimeout:
            print("Нет ответа, отправляем повторный запрос                        ",
                  end="\r", flush=True)
            continue
        except requests.exceptions.ConnectionError:
            print("Потеряно соединение с интернетом, пробуем переподключиться     ",
                  end="\r", flush=True)
            continue
        except telegram.error.TelegramError as err:
            print(f"Ошибка Telegram API {err.message}                              ",
                  end="\r", flush=True)
            continue


if __name__ == "__main__":
    main()
